%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "parser.tab.h"  /* Include header generated by Bison */

void DEBUG_PRINT(const char *token_name);
%}


%option noyywrap
%option caseless

%%

"/*"([^*]|(\*+[^*/]))*"*/"    {
    #ifdef DEBUG_LEXER
    printf("Token: COMMENT (ignored)\n");
    #endif
}
"//".*             {
    #ifdef DEBUG_LEXER
    printf("Token: COMMENT_LINE (ignored)\n");
    #endif
}
[ \t\n]+           {
    #ifdef DEBUG_LEXER
    printf("Token: WHITESPACE (ignored)\n");
    #endif
}

"set"              { DEBUG_PRINT("SET"); return SET; }
"play"             { DEBUG_PRINT("PLAY"); return PLAY; }
"repeat"           { DEBUG_PRINT("REPEAT"); return REPEAT; }
"if"               { DEBUG_PRINT("IF"); return IF; }
"else"             { DEBUG_PRINT("ELSE"); return ELSE; }
"function"         { DEBUG_PRINT("FUNCTION"); return FUNCTION; }
"tempo"            { DEBUG_PRINT("TEMPO"); return TEMPO; }
"instrument"       { DEBUG_PRINT("INSTRUMENT"); return INSTRUMENT; }
"volume"           { DEBUG_PRINT("VOLUME"); return VOLUME; }
"chord"            { DEBUG_PRINT("CHORD"); return CHORD; }

"whole"            { DEBUG_PRINT("DURATION"); yylval.str = strdup("whole"); return DURATION; }
"half"             { DEBUG_PRINT("DURATION"); yylval.str = strdup("half"); return DURATION; }
"quarter"          { DEBUG_PRINT("DURATION"); yylval.str = strdup("quarter"); return DURATION; }
"eighth"           { DEBUG_PRINT("DURATION"); yylval.str = strdup("eighth"); return DURATION; }

C[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
D[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
E[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
F[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
G[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
A[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }
B[0-8]             { DEBUG_PRINT("NOTE"); yylval.str = strdup(yytext); return NOTE; }

"C_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C_major"); return CHORD_NAME; }
"G_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G_major"); return CHORD_NAME; }
"A_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A_minor"); return CHORD_NAME; }
"D_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D_major"); return CHORD_NAME; }
"E_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("E_minor"); return CHORD_NAME; }
"F_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F_major"); return CHORD_NAME; }
"B_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("B_minor"); return CHORD_NAME; }
"C_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C_minor"); return CHORD_NAME; }
"G_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G_minor"); return CHORD_NAME; }
"D_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D_minor"); return CHORD_NAME; }
"A_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A_major"); return CHORD_NAME; }
"E_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("E_major"); return CHORD_NAME; }
"F_minor"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F_minor"); return CHORD_NAME; }
"B_major"          { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("B_major"); return CHORD_NAME; }
"F#_major"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F#_major"); return CHORD_NAME; }
"F#_minor"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F#_minor"); return CHORD_NAME; }
"C#_major"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C#_major"); return CHORD_NAME; }
"C#_minor"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C#_minor"); return CHORD_NAME; }
"D#_major"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D#_major"); return CHORD_NAME; }
"D#_minor"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D#_minor"); return CHORD_NAME; }
"G#_major"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G#_major"); return CHORD_NAME; }
"G#_minor"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G#_minor"); return CHORD_NAME; }
"A#_major"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A#_major"); return CHORD_NAME; }
"A#_minor"         { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A#_minor"); return CHORD_NAME; }
"C_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C_dim"); return CHORD_NAME; }
"D_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D_dim"); return CHORD_NAME; }
"E_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("E_dim"); return CHORD_NAME; }
"F_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F_dim"); return CHORD_NAME; }
"G_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G_dim"); return CHORD_NAME; }
"A_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A_dim"); return CHORD_NAME; }
"B_dim"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("B_dim"); return CHORD_NAME; }
"C_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("C_aug"); return CHORD_NAME; }
"D_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("D_aug"); return CHORD_NAME; }
"E_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("E_aug"); return CHORD_NAME; }
"F_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("F_aug"); return CHORD_NAME; }
"G_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("G_aug"); return CHORD_NAME; }
"A_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("A_aug"); return CHORD_NAME; }
"B_aug"            { DEBUG_PRINT("CHORD_NAME"); yylval.str = strdup("B_aug"); return CHORD_NAME; }

[0-9]+             { DEBUG_PRINT("NUM"); yylval.num = atoi(yytext); return NUM; }
"="                { DEBUG_PRINT("ASSIGN"); return ASSIGN; }
";"                { DEBUG_PRINT("SEMICOLON"); return SEMICOLON; }
","                { DEBUG_PRINT("COMMA"); return COMMA; }
"{"                { DEBUG_PRINT("LBRACE"); return LBRACE; }
"}"                { DEBUG_PRINT("RBRACE"); return RBRACE; }
"("                { DEBUG_PRINT("LPAREN"); return LPAREN; }
")"                { DEBUG_PRINT("RPAREN"); return RPAREN; }

[+-/\*]            { DEBUG_PRINT("OPERATOR"); yylval.op = yytext[0]; return OPERATOR; }

\"[^"]*\"          {
    printf("STRING token identified: %s\n", yytext);
    yylval.str = strdup(yytext);
    return STRING;
}

[a-zA-Z_][a-zA-Z0-9_]* {
    DEBUG_PRINT("IDENTIFIER");
    yylval.str = strdup(yytext);
    return IDENTIFIER;
}

">"                 { DEBUG_PRINT("GT"); return '>'; }
"<"                 { DEBUG_PRINT("LT"); return '<'; }
"=="                { DEBUG_PRINT("EQ"); return EQ; }
"!="                { DEBUG_PRINT("NEQ"); return NEQ; }
"&&"                { DEBUG_PRINT("AND"); return AND; }
"||"                { DEBUG_PRINT("OR"); return OR; }


.                  { fprintf(stderr, "Unrecognized character: %s\n", yytext); exit(1); }

%%

void DEBUG_PRINT(const char *token_name) {
    #ifdef DEBUG_LEXER
    printf("Token recognized: %s\n", token_name);
    #endif
}